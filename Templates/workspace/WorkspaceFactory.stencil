//
//  WorkspaceFactory.swift
//  {{ name }}
//
//  Created by {{ author }} on {{ date }}.
//  Copyright Â© {{ year }} {{ company }}. All rights reserved.
//

import ProjectDescription

public enum WorkspaceFactory {
    
    // MARK: - Workspace Creation
    
    public static func createWorkspace(
        name: String,
        projects: [String],
        schemes: [Scheme] = []
    ) -> Workspace {
        return Workspace(
            name: name,
            projects: projects,
            schemes: schemes,
            generationOptions: .options(
                enableAutomaticXcodeSchemes: false,
                autogeneratedWorkspaceSchemes: .disabled
            )
        )
    }
    
    // MARK: - Multi-App Project
    
    public static func createMultiAppProject(
        name: String,
        organizationName: String,
        bundleIdPrefix: String,
        apps: [String],
        sharedFrameworks: [String] = [],
        version: String = "1.0.0"
    ) -> Project {
        
        var allTargets: [Target] = []
        var allSchemes: [Scheme] = []
        
        // Create app targets
        for appName in apps {
            let appTargets = createAppTargets(
                appName: appName,
                bundleIdPrefix: bundleIdPrefix,
                version: version
            )
            allTargets.append(contentsOf: appTargets)
            
            // Create scheme for each app
            allSchemes.append(createAppScheme(appName: appName))
        }
        
        // Add shared frameworks
        for frameworkName in sharedFrameworks {
            let frameworkTargets = createSharedFrameworkTargets(
                name: frameworkName,
                bundleIdPrefix: bundleIdPrefix
            )
            allTargets.append(contentsOf: frameworkTargets)
        }
        
        return Project(
            name: name,
            organizationName: organizationName,
            settings: createWorkspaceSettings(version: version),
            targets: allTargets,
            schemes: allSchemes
        )
    }
    
    // MARK: - Individual App Projects
    
    public static func createAppProject(
        appName: String,
        organizationName: String,
        bundleIdPrefix: String,
        version: String = "1.0.0",
        dependencies: [String] = []
    ) -> Project {
        
        let appTargets = createAppTargets(
            appName: appName,
            bundleIdPrefix: bundleIdPrefix,
            version: version
        )
        
        let schemes = [createAppScheme(appName: appName)]
        
        return Project(
            name: appName,
            organizationName: organizationName,
            settings: createWorkspaceSettings(version: version),
            targets: appTargets,
            schemes: schemes
        )
    }
    
    // MARK: - Private Helpers
    
    private static func createAppTargets(
        appName: String,
        bundleIdPrefix: String,
        version: String
    ) -> [Target] {
        
        let appTarget = Target.createAppTarget(
            name: appName,
            bundleId: bundleIdPrefix,
            destinations: .iOS,
            versionNumber: version,
            hasResources: true,
            dependencies: [],
            additionalInfoPlist: [:]
        )
        
        let testTarget = Target.createAppTestTarget(
            name: appName,
            bundleId: bundleIdPrefix,
            destinations: .iOS,
            hasResources: false
        )
        
        return [appTarget, testTarget]
    }
    
    private static func createSharedFrameworkTargets(
        name: String,
        bundleIdPrefix: String
    ) -> [Target] {
        
        let framework = Target.frameworkTarget(
            name: name,
            bundleId: bundleIdPrefix,
            destinations: .iOS,
            hasResources: false,
            dependencies: []
        )
        
        let tests = Target.frameworkTestTarget(
            name: name,
            bundleId: bundleIdPrefix,
            hasResources: false,
            dependencies: []
        )
        
        return [framework, tests]
    }
    
    private static func createAppScheme(appName: String) -> Scheme {
        return Scheme(
            name: appName,
            buildAction: BuildAction(targets: ["\(appName)"]),
            testAction: TestAction(targets: ["\(appName)Tests"]),
            runAction: RunAction(executable: "\(appName)")
        )
    }
    
    private static func createWorkspaceSettings(version: String) -> Settings {
        return Settings.settings(
            base: SettingsDictionary()
                .marketingVersion(version)
                .currentProjectVersion("1")
                .automaticCodeSigning(devTeam: "$(DEVELOPMENT_TEAM)")
        )
    }
}